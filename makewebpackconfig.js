/*eslint-disable*/
var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");

module.exports = function(options) {
  var entry, plugins, cssLoaders, output;

  // If production is true
  if (options.prod) {
    // Entry
    entry = {
      app: path.resolve(__dirname, 'scripts/app.js'), // Start with js/app.js...
      vendor: [
        'react',
        'react-dom',
        'react-redux',
        'redux'
      ]
    };
    cssLoaders = ExtractTextPlugin.extract('style-loader', 'css?importLoaders=1&localIdentName=[path]___[name]__[local]___[hash:base64:5]!less');
    // Plugins
    plugins = [// Plugins for Webpack
      new webpack.optimize.CommonsChunkPlugin('vendor', 'scripts/vendor.bundle.js'),
      new webpack.optimize.UglifyJsPlugin({ // Optimize the JavaScript...
        compress: {
          warnings: false // ...but do not show warnings in the console (there is a lot of them)
        }
      }),
      new HtmlWebpackPlugin({
        template: 'index.html', // Move the index.html file...
        minify: { // Minifying it while it is parsed
          removeComments: true,
          collapseWhitespace: true,
          removeRedundantAttributes: true,
          useShortDoctype: true,
          removeEmptyAttributes: true,
          removeStyleLinkTypeAttributes: true,
          keepClosingSlash: true,
          minifyJS: true,
          minifyCSS: true,
          minifyURLs: true
        },
        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
      }),
      new ExtractTextPlugin("css/main_[hash].css"),
      new webpack.DefinePlugin({
        "process.env": {
          NODE_ENV: JSON.stringify("production")
        }
      })
    ];
    output = { // Compile into js/build.js
      path: path.resolve(__dirname, 'build'),
      publicPath: "/",
      filename: "scripts/[name]_[hash].js"
    };
  // If app is in development
  } else {
    // Entry
    entry = [
      "webpack-dev-server/client?http://localhost:4000", // Needed for hot reloading
      "webpack/hot/only-dev-server", // See above
      path.resolve(__dirname, 'scripts/app.js') // Start with js/app.js...
    ];
    cssLoaders = 'style-loader!css?importLoaders=1!less';
    // Only plugin is the hot module replacement plugin
    plugins = [
      new webpack.HotModuleReplacementPlugin(), // Make hot loading work
      new HtmlWebpackPlugin({
        template: 'index.html', // Move the index.html file
        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
      })
    ];
    output = {
        path: path.resolve(__dirname, 'build'),
        publicPath: "/",
        filename: "scripts/[name].js"
    };
  }


  return {
    entry: entry,
    output: output,
    module: {
      loaders: [{
          test: /\.js$/, // Transform all .js files required somewhere within an entry point...
          loader: 'babel', // ...with the specified loaders...
          exclude: path.join(__dirname, '/node_modules/') // ...except for the node_modules folder.
        }, {
          test:   /\.css$/, // Transform all .css files required somewhere within an entry point...
          loader: cssLoaders // 
        }
      ]
    },
    resolve: {
      modulesDirectories: ['node_modules', 'scripts', 'assets']
    },
    plugins: plugins,
    target: "web", // Make web variables accessible to webpack, e.g. window
    stats: false, // Don't show stats in the console
    progress: true
  }
}
/*eslint-enable*/
